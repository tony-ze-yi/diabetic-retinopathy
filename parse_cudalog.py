from ast import literal_eval


def convert_size(size_bytes):
    # Size in bytes
    size_name = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_name) - 1:
        size_bytes /= 1024
        i += 1
    return f"{round(size_bytes, 2)} {size_name[i]}"


qat_output = "[('active.all.allocated', 23497752), ('active.all.current', 1780), ('active.all.freed', 23495972), ('active.all.peak', 2635), ('active.large_pool.allocated', 8808954), ('active.large_pool.current', 333), ('active.large_pool.freed', 8808621), ('active.large_pool.peak', 890), ('active.small_pool.allocated', 14688798), ('active.small_pool.current', 1447), ('active.small_pool.freed', 14687351), ('active.small_pool.peak', 2076), ('active_bytes.all.allocated', 404802994906112), ('active_bytes.all.current', 1254882816), ('active_bytes.all.freed', 404801740023296), ('active_bytes.all.peak', 22251564544), ('active_bytes.large_pool.allocated', 404201313150976), ('active_bytes.large_pool.current', 1176536064), ('active_bytes.large_pool.freed', 404200136614912), ('active_bytes.large_pool.peak', 22144094208), ('active_bytes.small_pool.allocated', 601681755136), ('active_bytes.small_pool.current', 78346752), ('active_bytes.small_pool.freed', 601603408384), ('active_bytes.small_pool.peak', 107694080), ('allocated_bytes.all.allocated', 404802994906112), ('allocated_bytes.all.current', 1254882816), ('allocated_bytes.all.freed', 404801740023296), ('allocated_bytes.all.peak', 22251564544), ('allocated_bytes.large_pool.allocated', 404201313150976), ('allocated_bytes.large_pool.current', 1176536064), ('allocated_bytes.large_pool.freed', 404200136614912), ('allocated_bytes.large_pool.peak', 22144094208), ('allocated_bytes.small_pool.allocated', 601681755136), ('allocated_bytes.small_pool.current', 78346752), ('allocated_bytes.small_pool.freed', 601603408384), ('allocated_bytes.small_pool.peak', 107694080), ('allocation.all.allocated', 23497752), ('allocation.all.current', 1780), ('allocation.all.freed', 23495972), ('allocation.all.peak', 2635), ('allocation.large_pool.allocated', 8808954), ('allocation.large_pool.current', 333), ('allocation.large_pool.freed', 8808621), ('allocation.large_pool.peak', 890), ('allocation.small_pool.allocated', 14688798), ('allocation.small_pool.current', 1447), ('allocation.small_pool.freed', 14687351), ('allocation.small_pool.peak', 2076), ('inactive_split.all.allocated', 12665290), ('inactive_split.all.current', 126), ('inactive_split.all.freed', 12665164), ('inactive_split.all.peak', 168), ('inactive_split.large_pool.allocated', 4576309), ('inactive_split.large_pool.current', 87), ('inactive_split.large_pool.freed', 4576222), ('inactive_split.large_pool.peak', 106), ('inactive_split.small_pool.allocated', 8088981), ('inactive_split.small_pool.current', 39), ('inactive_split.small_pool.freed', 8088942), ('inactive_split.small_pool.peak', 90), ('inactive_split_bytes.all.allocated', 347615711572480), ('inactive_split_bytes.all.current', 6491996672), ('inactive_split_bytes.all.freed', 347609219575808), ('inactive_split_bytes.all.peak', 9727244800), ('inactive_split_bytes.large_pool.allocated', 346994862205952), ('inactive_split_bytes.large_pool.current', 6475971584), ('inactive_split_bytes.large_pool.freed', 346988386234368), ('inactive_split_bytes.large_pool.peak', 9711240192), ('inactive_split_bytes.small_pool.allocated', 620849366528), ('inactive_split_bytes.small_pool.current', 16025088), ('inactive_split_bytes.small_pool.freed', 620833341440), ('inactive_split_bytes.small_pool.peak', 27055104), ('max_split_size', -1), ('num_alloc_retries', 0), ('num_ooms', 0), ('oversize_allocations.allocated', 0), ('oversize_allocations.current', 0), ('oversize_allocations.freed', 0), ('oversize_allocations.peak', 0), ('oversize_segments.allocated', 0), ('oversize_segments.current', 0), ('oversize_segments.freed', 0), ('oversize_segments.peak', 0), ('reserved_bytes.all.allocated', 22724739072), ('reserved_bytes.all.current', 22477275136), ('reserved_bytes.all.freed', 247463936), ('reserved_bytes.all.peak', 22477275136), ('reserved_bytes.large_pool.allocated', 22605201408), ('reserved_bytes.large_pool.current', 22366126080), ('reserved_bytes.large_pool.freed', 239075328), ('reserved_bytes.large_pool.peak', 22366126080), ('reserved_bytes.small_pool.allocated', 119537664), ('reserved_bytes.small_pool.current', 111149056), ('reserved_bytes.small_pool.freed', 8388608), ('reserved_bytes.small_pool.peak', 111149056), ('segment.all.allocated', 186), ('segment.all.current', 179), ('segment.all.freed', 7), ('segment.all.peak', 179), ('segment.large_pool.allocated', 129), ('segment.large_pool.current', 126), ('segment.large_pool.freed', 3), ('segment.large_pool.peak', 126), ('segment.small_pool.allocated', 57), ('segment.small_pool.current', 53), ('segment.small_pool.freed', 4), ('segment.small_pool.peak', 53)]"
vit_output = "[('active.all.allocated', 3735129), ('active.all.current', 721), ('active.all.freed', 3734408), ('active.all.peak', 1300), ('active.large_pool.allocated', 1434171), ('active.large_pool.current', 171), ('active.large_pool.freed', 1434000), ('active.large_pool.peak', 455), ('active.small_pool.allocated', 2300958), ('active.small_pool.current', 550), ('active.small_pool.freed', 2300408), ('active.small_pool.peak', 922), ('active_bytes.all.allocated', 104793636515328), ('active_bytes.all.current', 814213120), ('active_bytes.all.freed', 104792822302208), ('active_bytes.all.peak', 21219655680), ('active_bytes.large_pool.allocated', 104321173530624), ('active_bytes.large_pool.current', 764690432), ('active_bytes.large_pool.freed', 104320408840192), ('active_bytes.large_pool.peak', 21118613504), ('active_bytes.small_pool.allocated', 472462984704), ('active_bytes.small_pool.current', 49522688), ('active_bytes.small_pool.freed', 472413462016), ('active_bytes.small_pool.peak', 103129088), ('allocated_bytes.all.allocated', 104793636515328), ('allocated_bytes.all.current', 814213120), ('allocated_bytes.all.freed', 104792822302208), ('allocated_bytes.all.peak', 21219655680), ('allocated_bytes.large_pool.allocated', 104321173530624), ('allocated_bytes.large_pool.current', 764690432), ('allocated_bytes.large_pool.freed', 104320408840192), ('allocated_bytes.large_pool.peak', 21118613504), ('allocated_bytes.small_pool.allocated', 472462984704), ('allocated_bytes.small_pool.current', 49522688), ('allocated_bytes.small_pool.freed', 472413462016), ('allocated_bytes.small_pool.peak', 103129088), ('allocation.all.allocated', 3735129), ('allocation.all.current', 721), ('allocation.all.freed', 3734408), ('allocation.all.peak', 1300), ('allocation.large_pool.allocated', 1434171), ('allocation.large_pool.current', 171), ('allocation.large_pool.freed', 1434000), ('allocation.large_pool.peak', 455), ('allocation.small_pool.allocated', 2300958), ('allocation.small_pool.current', 550), ('allocation.small_pool.freed', 2300408), ('allocation.small_pool.peak', 922), ('inactive_split.all.allocated', 1831976), ('inactive_split.all.current', 65), ('inactive_split.all.freed', 1831911), ('inactive_split.all.peak', 154), ('inactive_split.large_pool.allocated', 682776), ('inactive_split.large_pool.current', 32), ('inactive_split.large_pool.freed', 682744), ('inactive_split.large_pool.peak', 116), ('inactive_split.small_pool.allocated', 1149200), ('inactive_split.small_pool.current', 33), ('inactive_split.small_pool.freed', 1149167), ('inactive_split.small_pool.peak', 70), ('inactive_split_bytes.all.allocated', 45603520485888), ('inactive_split_bytes.all.current', 666376192), ('inactive_split_bytes.all.freed', 45602854109696), ('inactive_split_bytes.all.peak', 2876618752), ('inactive_split_bytes.large_pool.allocated', 45123942183936), ('inactive_split_bytes.large_pool.current', 655081472), ('inactive_split_bytes.large_pool.freed', 45123287102464), ('inactive_split_bytes.large_pool.peak', 2852038656), ('inactive_split_bytes.small_pool.allocated', 479578301952), ('inactive_split_bytes.small_pool.current', 11294720), ('inactive_split_bytes.small_pool.freed', 479567007232), ('inactive_split_bytes.small_pool.peak', 36898816), ('max_split_size', -1), ('num_alloc_retries', 0), ('num_ooms', 0), ('oversize_allocations.allocated', 0), ('oversize_allocations.current', 0), ('oversize_allocations.freed', 0), ('oversize_allocations.peak', 0), ('oversize_segments.allocated', 0), ('oversize_segments.current', 0), ('oversize_segments.freed', 0), ('oversize_segments.peak', 0), ('requested_bytes.all.allocated', 104696113678878), ('requested_bytes.all.current', 813142816), ('requested_bytes.all.freed', 104695300536062), ('requested_bytes.all.peak', 21200522088), ('requested_bytes.large_pool.allocated', 104223750544100), ('requested_bytes.large_pool.current', 763631616), ('requested_bytes.large_pool.freed', 104222986912484), ('requested_bytes.large_pool.peak', 21099512704), ('requested_bytes.small_pool.allocated', 472363134778), ('requested_bytes.small_pool.current', 49511200), ('requested_bytes.small_pool.freed', 472313623578), ('requested_bytes.small_pool.peak', 103115432), ('reserved_bytes.all.allocated', 21904752640), ('reserved_bytes.all.current', 21904752640), ('reserved_bytes.all.freed', 0), ('reserved_bytes.all.peak', 21904752640), ('reserved_bytes.large_pool.allocated', 21797797888), ('reserved_bytes.large_pool.current', 21797797888), ('reserved_bytes.large_pool.freed', 0), ('reserved_bytes.large_pool.peak', 21797797888), ('reserved_bytes.small_pool.allocated', 106954752), ('reserved_bytes.small_pool.current', 106954752), ('reserved_bytes.small_pool.freed', 0), ('reserved_bytes.small_pool.peak', 106954752), ('segment.all.allocated', 224), ('segment.all.current', 224), ('segment.all.freed', 0), ('segment.all.peak', 224), ('segment.large_pool.allocated', 173), ('segment.large_pool.current', 173), ('segment.large_pool.freed', 0), ('segment.large_pool.peak', 173), ('segment.small_pool.allocated', 51), ('segment.small_pool.current', 51), ('segment.small_pool.freed', 0), ('segment.small_pool.peak', 51)]"

# Convert the string representation to an actual ordered dict
qat_output = dict(literal_eval(qat_output))
vit_output = dict(literal_eval(vit_output))

print(len(qat_output))
print(len(vit_output))
# Print the key-value pairs
print("| key | QAT | ViT | QAT - ViT difference|")
for key in qat_output:
    if "bytes" in key:
        print(
            f"| {key} | {convert_size(qat_output[key])} | {convert_size(vit_output[key])} | {convert_size(qat_output[key] - vit_output[key])} |"
        )
    else:
        print(
            f"| {key} | {qat_output[key]} | {vit_output[key]} | {qat_output[key] - vit_output[key]} |"
        )
